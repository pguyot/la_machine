# SPDX-License-Identifier: Apache-2.0
name: Build
on:
  push:
    branches: ["main"]
  pull_request:
  workflow_dispatch:

jobs:
  erlfmt:
    runs-on: ubuntu-latest
    container: erlang:27
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Run erlfmt
      run: |
        rebar3 as check fmt --check

  build_and_test:
    runs-on: ubuntu-latest
    container: erlang:27
    steps:
    - name: Checkout AtomVM
      uses: actions/checkout@v4
      with:
        # repository: atomvm/AtomVM
        # ref: release-0.6
        repository: pguyot/AtomVM
        ref: w25/la_machine
        path: AtomVM

    - name: Checkout atomvm_esp_adf
      uses: actions/checkout@v4
      with:
        path: la_machine

    - name: Compile la_machine
      working-directory: la_machine/
      run: |
        rebar3 compile

    - name: Run eunit tests with BEAM
      working-directory: la_machine/
      run: |
        rebar3 eunit

    - name: Install dependencies to build AtomVM and its libraries
      run: |
        set -eu
        apt update
        DEBIAN_FRONTEND=noninteractive apt install -y -q \
            doxygen gcc g++ zlib1g-dev libmbedtls-dev make cmake gperf ninja-build

    - name: Build AtomVM and its libraries
      shell: bash
      working-directory: AtomVM/
      run: |
        mkdir build
        cd build
        cmake .. -G Ninja
        cmake --build .

    - name: Build PLT
      working-directory: la_machine/
      run: |
        dialyzer --build_plt --output_plt la_machine_deps.plt ../AtomVM/build/libs/estdlib/src/beams ../AtomVM/build/libs/eavmlib/src/beams _build/default/lib/atomvm_esp_adf/ebin/

    - name: Run dialyzer using source code
      working-directory: la_machine/
      run: |
        dialyzer --plt la_machine_deps.plt --src src/

    - name: Run eunit tests with AtomVM
      working-directory: la_machine/
      run: |
        rebar3 as test atomvm packbeam \
            -s eunit \
            -e $PWD/../AtomVM/build/libs/etest/src/beams/eunit.beam \
            -e $PWD/../AtomVM/build/libs/atomvmlib.avm
        cp _build/test/lib/la_machine.avm la_machine_tests.avm
        ../AtomVM/build/src/AtomVM la_machine_tests.avm | tee test.log
        grep -xqE -e '- [[:digit:]]+ Tests 0 Failures 0 Ignored OK' test.log

    - name: Run packbeam
      working-directory: la_machine/
      run: |
        rebar3 atomvm packbeam -p \
            -e `pwd`/../AtomVM/build/libs/eavmlib/src/eavmlib.avm \
            -e `pwd`/../AtomVM/build/libs/estdlib/src/estdlib.avm

    - name: Upload la_machine.avm
      uses: actions/upload-artifact@v4
      with:
        name: la_machine.avm
        path: la_machine/_build/default/lib/la_machine.avm
        if-no-files-found: error
        retention-days: 1

    - name: Upload la_machine_tests.avm
      uses: actions/upload-artifact@v4
      with:
        name: la_machine_tests.avm
        path: la_machine/la_machine_tests.avm
        if-no-files-found: error
        retention-days: 1

  build_vm:
    runs-on: ubuntu-latest
    container: espressif/idf:v5.2.2
    steps:
    - name: Checkout La Machine
      uses: actions/checkout@v4
      with:
        path: la_machine

    - name: Checkout AtomVM
      uses: actions/checkout@v4
      with:
        # repository: atomvm/AtomVM
        # ref: release-0.6
        repository: pguyot/AtomVM
        ref: w25/la_machine
        path: AtomVM

    - name: Checkout atomvm_esp_adf
      uses: actions/checkout@v4
      with:
        repository: pguyot/atomvm_esp_adf
        path: AtomVM/src/platforms/esp32/components/atomvm_esp_adf/

    - name: Checkout atomvm_esp_adf submodules
      shell: bash
      working-directory: AtomVM/src/platforms/esp32/components/atomvm_esp_adf/
      run: |
        git submodule update --init components/esp-adf
        cd components/esp-adf
        git submodule update --init components/esp-adf-libs/

    - name: Build esp32c3 binary with idf.py
      shell: bash
      working-directory: AtomVM/src/platforms/esp32/
      run: |
        cp sdkconfig.release-defaults sdkconfig.defaults
        rm -rf build
        . $IDF_PATH/export.sh
        idf.py set-target esp32c3
        echo CONFIG_FREERTOS_ENABLE_BACKWARD_COMPATIBILITY=y >> sdkconfig
        echo CONFIG_AVM_ENABLE_NETWORK_PORT_DRIVER=n >> sdkconfig
        echo CONFIG_AVM_ENABLE_SOCKET_PORT_DRIVER=n >> sdkconfig
        echo CONFIG_AVM_ENABLE_OTP_SOCKET_NIFS=n >> sdkconfig
        echo CONFIG_AVM_ENABLE_OTP_NET_NIFS=n >> sdkconfig
        echo CONFIG_AVM_ENABLE_OTP_SSL_NIFS=n >> sdkconfig
        echo CONFIG_AVM_ESP_ADF_PWM_OUTPUT_ENABLE=n >> sdkconfig
        echo CONFIG_AVM_ENABLE_GPIO_PORT_DRIVER=n >> sdkconfig
        echo CONFIG_AVM_ENABLE_UART_PORT_DRIVER=n >> sdkconfig
        idf.py build

    - name: Build la machine partitions map
      shell: bash
      working-directory: la_machine/image/
      run: |
        python $IDF_PATH/components/partition_table/gen_esp32part.py partitions.csv partitions.bin

    - name: Upload AtomVM built files
      uses: actions/upload-artifact@v4
      with:
        name: la_machine-atomvm
        path: |
            AtomVM/src/platforms/esp32/build/bootloader/bootloader.bin
            AtomVM/src/platforms/esp32/build/mkimage.erl
            AtomVM/src/platforms/esp32/build/atomvm-esp32.bin
            AtomVM/src/platforms/esp32/test/qemu_esp32c3_efuse.bin
        if-no-files-found: error
        retention-days: 1

    - name: Upload partition map
      uses: actions/upload-artifact@v4
      with:
        name: partitions.bin
        path: la_machine/image/partitions.bin
        if-no-files-found: error
        retention-days: 1

  test_with_qemu:
    needs: [build_and_test, build_vm]
    runs-on: ubuntu-latest
    container: espressif/idf:v5.2.2
    steps:
    - name: Checkout La Machine
      uses: actions/checkout@v4

    - name: Download VM
      uses: actions/download-artifact@v4
      with:
        name: la_machine-atomvm
        path: image/

    - name: Download partition map
      uses: actions/download-artifact@v4
      with:
        name: partitions.bin
        path: image/

    - name: Download la_machine_tests.avm
      uses: actions/download-artifact@v4
      with:
        name: la_machine_tests.avm
        path: image/

    - name: Run tests with qemu
      shell: bash
      run: |
        . $IDF_PATH/export.sh
        pip install -U pytest-embedded pytest-embedded-qemu
        pytest test_qemu.py

  make_image:
    needs: [build_and_test, build_vm]
    runs-on: ubuntu-latest
    container: erlang:27
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download partition map
      uses: actions/download-artifact@v4
      with:
        name: partitions.bin
        path: image/

    - name: Download VM
      uses: actions/download-artifact@v4
      with:
        name: la_machine-atomvm
        path: image/

    - name: Download la_machine
      uses: actions/download-artifact@v4
      with:
        name: la_machine.avm
        path: image/

    - name: Build image
      shell: bash
      working-directory: image
      run: |
        escript build/mkimage.erl --root_dir . --config mkimage.config --out la_machine.img

    - name: Upload image
      uses: actions/upload-artifact@v4
      with:
        name: la_machine.img
        path: image/la_machine.img
        if-no-files-found: error
